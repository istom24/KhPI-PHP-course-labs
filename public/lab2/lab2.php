
<!--2. Обробка завантаження файлу на сервер:-->
<!--● Напишіть PHP-скрипт, який обробляє завантаження файлу за допомогою масиву $_FILES.-->
<!--● Перевірте, чи файл успішно завантажений, використовуючи функцію is_uploaded_file().-->
<!--● Перевірте тип файлу (розширення) та його розмір. Дозвольте завантаження лише зображень (png, jpg, jpeg) з розміром не більше 2 МБ.-->
<!--● Використайте функцію move_uploaded_file(), щоб зберегти файл у директорії на сервері (наприклад, у папці uploads).-->
<!--3. Виведення інформації про файл:-->
<!--● Після успішного завантаження файлу, виведіть на екран інформацію про файл: ім'я файлу, його тип, розмір (у кілобайтах).-->
<!--● Створіть посилання для завантаження файлу, яке дозволить користувачу завантажити його назад.-->
<!--4. Перевірка наявності файлу:-->
<!--● Реалізуйте перевірку, чи існує файл з таким же ім'ям у папці uploads.-->
<!--● Якщо файл вже існує, повідомте про це користувача та запропонуйте йому змінити назву файлу або автоматично додайте унікальний суфікс
до імені файлу (наприклад, дату або випадковий номер).-->
<!--5. Читання та запис у файл:-->
<!--● Напишіть PHP-скрипт, який записує дані (текст) у файл (наприклад, у файл log.txt).-->
<!--● Реалізуйте читання даних із цього файлу та виведення їх на веб-сторінку.-->
<!--6. Виведення списку файлів:-->
<!--● Напишіть PHP-скрипт, який виводить список всіх файлів, що знаходяться у директорії uploads.-->
<!--● Створіть посилання для завантаження кожного файлу зі списку.-->
<?php
