Лабораторна робота № 5
Тема: Об'єктно-орієнтоване програмування в PHP.
Мета: Навчитися працювати з винятками в PHP для обробки
помилок. Ознайомитися з інтерфейсами та їх використанням.
Використовувати константи та статичні характеристики в класах.
Закріпити принципи спадкування та поліморфізму.
Завдання:
Реалізувати систему класів для роботи з банківськими
рахунками. Кожен рахунок має свою валюту, а також можливість
знімати та поповнювати кошти. Використати обробку винятків
для керування помилками, які можуть виникнути при взаємодії з
рахунком (наприклад, недостатньо коштів для зняття).
Крок 1: Створення інтерфейсу для банківського рахунку
1. Створіть інтерфейс AccountInterface, який містить
методи:
● deposit($amount)– для поповнення рахунку.
● withdraw($amount) – для зняття коштів з рахунку.
● getBalance() – для отримання поточного балансу
Крок 2: Створення базового класу з константою та обробкою
винятків
1. Створіть клас BankAccount, який реалізує інтерфейс
AccountInterface.
● Додайте константу MIN_BALANCE, яка визначає
мінімальний баланс рахунку (наприклад, 0).
● Реалізуйте властивості:
● balance – поточний баланс рахунку.
● currency – валюта рахунку (наприклад, "USD").
● Реалізуйте методи deposit, withdraw та getBalance.
● Використовуйте обробку винятків (Exception) для
перевірки:
● Якщо сума для зняття більше, ніж баланс рахунку –
викидайте виняток Exception з повідомленням
"Недостатньо коштів".
● Якщо сума для зняття або поповнення некоректна
(негативна) – викидайте виняток з відповідним
повідомленням.
Крок 3: Спадкування та статичні властивості
1. Створіть клас SavingsAccount, який успадковує
BankAccount.
● Додайте статичну властивість interestRate, яка
визначає відсоткову ставку для накопичувального
рахунку.
● Реалізуйте метод applyInterest(), який додає до
балансу відсоток від поточного балансу відповідно до
відсоткової ставки.
Крок 4: Тестування та обробка винятків
1. Створіть кілька об'єктів класу BankAccount та
SavingsAccount і протестуйте їх функціонал:
● Поповнення рахунку.
● Зняття коштів.
● Використання методу applyInterest() для
накопичувального рахунку.
2. Обробіть всі винятки, які можуть виникнути під час
операцій з рахунками, і виведіть відповідні повідомлення
про помилки.
Завдання:
1. Реалізуйте інтерфейс AccountInterface і клас
BankAccount, відповідно до описаних вимог.
2. Додайте перевірку введених даних та реалізуйте обробку
винятків для некоректних операцій.
3. Створіть клас SavingsAccount з функціоналом
накопичувального рахунку та застосуванням відсоткової
ставки.
4. Напишіть код для тестування різних операцій з
банківськими рахунками.
Звіт:
Звіт має включати в себе довільний набір php файлів. Окрім
самих класів та методів в коді має бути представлено
“клієнтський код” - приклад роботи з розробленими
классами та методами.